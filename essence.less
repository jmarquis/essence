////////////////////////////////////////////////////////////////////////
//                                                                    //
//    This is Essence.                                                //
//    0.2.1 LESS                                                      //
//                                                                    //
//    http://jmarquis.github.com/essence                              //
//    Minimalist, responsive, semantic layouts.                       //
//                                                                    //
////////////////////////////////////////////////////////////////////////


// Default space between each cell in a container. Percentage value recommended.
@default-gutter: 5%;

// Default point below which cells stack.
@default-breakpoint: 768px;

// This mixin defines a container for cells.
.essence (@gutter: @default-gutter; @breakpoint: @default-breakpoint) {
	margin-top: -@gutter;
	margin-bottom: -@gutter;

	@media (min-width: @breakpoint) {
		margin: (0 - (@gutter / 2));
	}

	// clearfix
	&::before,
	&::after {
		content: "";
		display: table;
	}

	&::after {
		clear: both;
	}
}

// A cell is a content container.
.cell (@width: 100%; @gutter: @default-gutter; @breakpoint: @default-breakpoint) when (ispercentage(@width)) {
	min-height: 1px;
	margin-top: @gutter;
	margin-bottom: @gutter;

	@media (min-width: @breakpoint) {
		float: left;
		width: (@width - @gutter);
		margin: (@gutter / 2);
	}
}

// Cell width can also be defined by a number from 0 to 1, which is converted to a percentage.
.cell (@width: 1; @gutter: @default-gutter; @breakpoint: @default-breakpoint) when (isnumber(@width)) and not (ispercentage(@width)) {
	.cell(percentage(@width); @gutter; @breakpoint);
}

// Offset a cell by a percentage.
.offset (@width: 100%; @gutter: @default-gutter; @breakpoint: @default-breakpoint) when (ispercentage(@width)) {

	@media (min-width: @breakpoint) {
		margin-left: (@width + (@gutter / 2));
	}
}

// Also works by converting a number between 0 and 1.
.offset (@width: 1; @gutter: @default-gutter; @breakpoint: @default-breakpoint) when (isnumber(@width)) and not (ispercentage(@width)) {
	.offset(percentage(@width); @gutter; @breakpoint);
}
